import { Injectable } from '@nestjs/common';
import axios from 'axios';
import nlp from 'compromise';
import { NlpManager } from 'node-nlp';

interface Conversation {
    messages: string[];
    context: {
        username: string;
        lastIntent: string;
        mood: string;
        topics: Set<string>;
        lastInteraction: Date;
        memory: {
            lastQuestion?: string;
            lastTopic?: string;
            sentiment?: number;
            keywords?: string[];
            userPreferences?: {
                foods?: string[];
                music?: string[];
                interests?: string[];
            };
            facts?: {
                [key: string]: any;
            };
        };
    };
}

interface KnowledgeBase {
  thailand: {
    provinces: {
      count: number;
      list: string[];
      regions: {
        north: string[];
        northeast: string[];
        central: string[];
        east: string[];
        west: string[];
        south: string[];
      };
    };
    population: number;
    capital: string;
    language: string;
  };
  general: {
    [key: string]: any;
  };
}

@Injectable()
export class AIService {
    private conversations: Map<string, Conversation> = new Map();
    private readonly CONTEXT_TIMEOUT = 1000 * 60 * 5; // 5 minutes
    private nlpManager: NlpManager;

    private knowledgeBase: KnowledgeBase = {
        thailand: {
            provinces: {
                count: 77,
                list: [
                    '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', '‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà', '‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ', '‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå', '‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£',
                    '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', '‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤', '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ', '‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó',
                    '‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥', '‡∏ä‡∏∏‡∏°‡∏û‡∏£', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏ï‡∏£‡∏±‡∏á',
                    '‡∏ï‡∏£‡∏≤‡∏î', '‡∏ï‡∏≤‡∏Å', '‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å', '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°', '‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°',
                    '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤', '‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä', '‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå', '‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™',
                    '‡∏ô‡πà‡∏≤‡∏ô', '‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨', '‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå', '‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå',
                    '‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ', '‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ', '‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤', '‡∏û‡∏∞‡πÄ‡∏¢‡∏≤', '‡∏û‡∏±‡∏á‡∏á‡∏≤',
                    '‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á', '‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£', '‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å', '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ', '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå',
                    '‡πÅ‡∏û‡∏£‡πà', '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', '‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°', '‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£', '‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô',
                    '‡∏¢‡πÇ‡∏™‡∏ò‡∏£', '‡∏¢‡∏∞‡∏•‡∏≤', '‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î', '‡∏£‡∏∞‡∏ô‡∏≠‡∏á', '‡∏£‡∏∞‡∏¢‡∏≠‡∏á',
                    '‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ', '‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ', '‡∏•‡∏≥‡∏õ‡∏≤‡∏á', '‡∏•‡∏≥‡∏û‡∏π‡∏ô', '‡πÄ‡∏•‡∏¢',
                    '‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©', '‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£', '‡∏™‡∏á‡∏Ç‡∏•‡∏≤', '‡∏™‡∏ï‡∏π‡∏•', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£',
                    '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£', '‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß', '‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ',
                    '‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢', '‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå', '‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢',
                    '‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π', '‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á', '‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç', '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå',
                    '‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ'
                ],
                regions: {
                    north: ['‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢', '‡∏ô‡πà‡∏≤‡∏ô', '‡∏û‡∏∞‡πÄ‡∏¢‡∏≤', '‡πÅ‡∏û‡∏£‡πà', '‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô', '‡∏•‡∏≥‡∏õ‡∏≤‡∏á', '‡∏•‡∏≥‡∏û‡∏π‡∏ô', '‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå'],
                    northeast: ['‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå', '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', '‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥', '‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°', '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤', '‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨', '‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå', '‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°', '‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£', '‡∏¢‡πÇ‡∏™‡∏ò‡∏£', '‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î', '‡πÄ‡∏•‡∏¢', '‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©', '‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£', '‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå', '‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢', '‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π', '‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç', '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ'],
                    central: ['‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', '‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£', '‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó', '‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å', '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°', '‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå', '‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤', '‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£', '‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å', '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå', '‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£', '‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢', '‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ', '‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á', '‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ'],
                    east: ['‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤', '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ', '‡∏ï‡∏£‡∏≤‡∏î', '‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ', '‡∏£‡∏∞‡∏¢‡∏≠‡∏á', '‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß'],
                    west: ['‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ', '‡∏ï‡∏≤‡∏Å', '‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå', '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ', '‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ'],
                    south: ['‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà', '‡∏ä‡∏∏‡∏°‡∏û‡∏£', '‡∏ï‡∏£‡∏±‡∏á', '‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä', '‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™', '‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ', '‡∏û‡∏±‡∏á‡∏á‡∏≤', '‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á', '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', '‡∏¢‡∏∞‡∏•‡∏≤', '‡∏£‡∏∞‡∏ô‡∏≠‡∏á', '‡∏™‡∏á‡∏Ç‡∏•‡∏≤', '‡∏™‡∏ï‡∏π‡∏•', '‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ']
                }
            },
            population: 69950850,
            capital: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
            language: '‡πÑ‡∏ó‡∏¢'
        },
        general: {}
    };

    private specializedKnowledge = {
        history: {
            capitals: [
                { name: '‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢', period: '‡∏û.‡∏®. 1792-1981', details: '‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ‡πÅ‡∏´‡πà‡∏á‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÑ‡∏ó‡∏¢' },
                { name: '‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤', period: '‡∏û.‡∏®. 1893-2310', details: '‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ô‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏£‡∏ß‡∏° 417 ‡∏õ‡∏µ' },
                { name: '‡∏ò‡∏ô‡∏ö‡∏∏‡∏£‡∏µ', period: '‡∏û.‡∏®. 2310-2325', details: '‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ‡πÉ‡∏ô‡∏™‡∏°‡∏±‡∏¢‡∏Å‡∏£‡∏∏‡∏á‡∏ò‡∏ô‡∏ö‡∏∏‡∏£‡∏µ' },
                { name: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', period: '‡∏û.‡∏®. 2325-‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô', details: '‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢' }
            ],
            importantEvents: [
                { year: 1238, event: '‡∏™‡∏ñ‡∏≤‡∏õ‡∏ô‡∏≤‡∏Å‡∏£‡∏∏‡∏á‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢' },
                { year: 1350, event: '‡∏™‡∏ñ‡∏≤‡∏õ‡∏ô‡∏≤‡∏Å‡∏£‡∏∏‡∏á‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤' },
                { year: 1767, event: '‡πÄ‡∏™‡∏µ‡∏¢‡∏Å‡∏£‡∏∏‡∏á‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 2' },
                { year: 1782, event: '‡∏™‡∏ñ‡∏≤‡∏õ‡∏ô‡∏≤‡∏Å‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏ï‡∏ô‡πÇ‡∏Å‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡πå' },
                { year: 1932, event: '‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á' }
            ]
        },
        culture: {
            festivals: [
                { name: '‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå', date: '13-15 ‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', details: '‡∏õ‡∏£‡∏∞‡πÄ‡∏û‡∏ì‡∏µ‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏ó‡∏¢' },
                { name: '‡∏•‡∏≠‡∏¢‡∏Å‡∏£‡∏∞‡∏ó‡∏á', date: '‡∏ß‡∏±‡∏ô‡πÄ‡∏û‡πá‡∏ç‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 12', details: '‡∏õ‡∏£‡∏∞‡πÄ‡∏û‡∏ì‡∏µ‡∏•‡∏≠‡∏¢‡∏Å‡∏£‡∏∞‡∏ó‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏Ç‡∏°‡∏≤‡∏û‡∏£‡∏∞‡πÅ‡∏°‡πà‡∏Ñ‡∏á‡∏Ñ‡∏≤' }
            ],
            food: {
                dishes: ['‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á', '‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢', '‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô', '‡∏™‡πâ‡∏°‡∏ï‡∏≥', '‡∏°‡∏±‡∏™‡∏°‡∏±‡πà‡∏ô'],
                regions: {
                    north: ['‡∏Ç‡πâ‡∏≤‡∏ß‡∏ã‡∏≠‡∏¢', '‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡∏´‡∏ô‡∏∏‡πà‡∏°', '‡πÅ‡∏Å‡∏á‡∏Æ‡∏±‡∏á‡πÄ‡∏•'],
                    northeast: ['‡∏™‡πâ‡∏°‡∏ï‡∏≥', '‡∏•‡∏≤‡∏ö', '‡∏Å‡πâ‡∏≠‡∏¢'],
                    central: ['‡∏ï‡πâ‡∏°‡∏¢‡∏≥', '‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô', '‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢'],
                    south: ['‡πÅ‡∏Å‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á', '‡πÑ‡∏Å‡πà‡∏ó‡∏≠‡∏î‡∏´‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà', '‡∏Ç‡πâ‡∏≤‡∏ß‡∏¢‡∏≥']
                }
            }
        }
    };

    constructor() {
        this.initializeNLP();
    }

    private async initializeNLP() {
        this.nlpManager = new NlpManager({ languages: ['th'] });
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏π‡πâ‡∏à‡∏≥ intent
        this.nlpManager.addDocument('th', '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ', 'greeting');
        this.nlpManager.addDocument('th', '‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ', 'greeting');
        this.nlpManager.addDocument('th', '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì', 'thanks');
        this.nlpManager.addDocument('th', '‡∏Ç‡∏≠‡∏ö‡πÉ‡∏à', 'thanks');
        this.nlpManager.addDocument('th', '‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô', 'bye');
        this.nlpManager.addDocument('th', '‡∏ö‡∏≤‡∏¢', 'bye');

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ intent
        this.nlpManager.addAnswer('th', 'greeting', '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡∏ö üòä');
        this.nlpManager.addAnswer('th', 'thanks', '‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö üôè');
        this.nlpManager.addAnswer('th', 'bye', '‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ üëã');

        // ‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
        await this.nlpManager.train();
    }

    async processMessage(message: string, userId: string = 'default'): Promise<string> {
        try {
            const conversation = this.getOrCreateConversation(userId);
            const context = conversation.context;

            // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
            conversation.messages.push(message);
            if (conversation.messages.length > 10) {
                conversation.messages.shift();
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏´‡πâ‡∏≤‡∏°
            if (this.containsBadWords(message)) {
                return '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö üôè';
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
            if (this.isFollowUpQuestion(message, context)) {
                const followUpAnswer = await this.handleFollowUpQuestion(message, context);
                if (followUpAnswer) {
                    return followUpAnswer;
                }
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå
            if (this.isHistoricalQuestion(message)) {
                return this.getHistoricalAnswer(message, context);
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°
            if (this.isCulturalQuestion(message)) {
                return this.getCulturalAnswer(message, context);
            }

            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ
            const answer = await this.findAnswer(message);
            if (answer) {
                context.memory.lastTopic = 'knowledge';
                context.memory.lastQuestion = message;
                return answer;
            }

            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å Wikipedia
            const wikiAnswer = await this.searchWikipedia(message);
            if (wikiAnswer) {
                context.memory.lastTopic = 'wikipedia';
                context.memory.lastQuestion = message;
                return wikiAnswer;
            }

            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            return this.getDefaultResponse(message, context.username);
        } catch (error) {
            console.error('Error processing message:', error);
            return '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡∏ö üôè';
        }
    }

    private getDefaultResponse(message: string, username: string): string {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢
        if (message.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ') || message.includes('‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ')) {
            return '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡∏ö üòä';
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì
        if (message.includes('‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì') || message.includes('‡∏Ç‡∏≠‡∏ö‡πÉ‡∏à')) {
            return '‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö üôè';
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏•‡∏≤
        if (message.includes('‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô') || message.includes('‡∏ö‡∏≤‡∏¢')) {
            return '‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ üëã';
        }

        const defaultResponses = [
            '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ ‡∏Ñ‡∏∏‡∏ì‡∏ä‡πà‡∏ß‡∏¢‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? ü§î',
            '‡∏Ñ‡∏∏‡∏ì‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? ‡∏ú‡∏°‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ üôè',
            '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ñ‡∏∏‡∏ì‡∏ä‡πà‡∏ß‡∏¢‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? ü§ù',
            '‡∏ú‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Ñ‡∏∏‡∏ì‡∏ä‡πà‡∏ß‡∏¢‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? ü§î'
        ];
        
        return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
    }

    private analyzeSentiment(message: string): number {
        const positiveWords = ['‡∏î‡∏µ', '‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°', '‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î', '‡∏ä‡∏≠‡∏ö', '‡∏£‡∏±‡∏Å', '‡∏™‡∏ô‡∏∏‡∏Å', '‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç'];
        const negativeWords = ['‡πÅ‡∏¢‡πà', '‡πÄ‡∏®‡∏£‡πâ‡∏≤', '‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à', '‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢', '‡∏ó‡πâ‡∏≠', '‡πÇ‡∏Å‡∏£‡∏ò', '‡πÄ‡∏Å‡∏•‡∏µ‡∏¢‡∏î'];
        
        let score = 0;
        const words = message.toLowerCase().split(' ');
        
        words.forEach(word => {
            if (positiveWords.includes(word)) score += 1;
            if (negativeWords.includes(word)) score -= 1;
        });
        
        return score;
    }

    private isFollowUpQuestion(message: string, context: Conversation['context']): boolean {
        const followUpKeywords = ['‡πÅ‡∏•‡πâ‡∏ß', '‡∏ï‡πà‡∏≠', '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°', '‡∏≠‡∏µ‡∏Å', '‡∏î‡πâ‡∏ß‡∏¢'];
        const hasFollowUpKeyword = followUpKeywords.some(keyword => message.includes(keyword));
        
        return hasFollowUpKeyword && context.memory.lastTopic !== undefined;
    }

    private async handleFollowUpQuestion(message: string, context: Conversation['context']): Promise<string> {
        const lastTopic = context.memory.lastTopic;
        const lastQuestion = context.memory.lastQuestion;

        if (lastTopic === 'thailand') {
            if (message.includes('‡∏†‡∏≤‡∏Ñ') || message.includes('‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î')) {
                return this.getRegionalInfo(message, context);
            }
        }

        if (lastTopic === 'history') {
            if (message.includes('‡∏ï‡πà‡∏≠‡∏°‡∏≤') || message.includes('‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô')) {
                return this.getHistoricalTimeline(lastQuestion, message);
            }
        }

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ
        return '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ñ‡∏∏‡∏ì‡∏ä‡πà‡∏ß‡∏¢‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? ü§î';
    }

    private isHistoricalQuestion(message: string): boolean {
        const historicalKeywords = [
            '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡∏≠‡∏î‡∏µ‡∏ï', '‡∏™‡∏°‡∏±‡∏¢‡∏Å‡πà‡∏≠‡∏ô', '‡∏£‡∏≤‡∏ä‡∏ß‡∏á‡∏®‡πå', 
            '‡∏Å‡∏£‡∏∏‡∏á‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤', '‡∏£‡∏±‡∏ï‡∏ô‡πÇ‡∏Å‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡πå', '‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢', '‡∏ò‡∏ô‡∏ö‡∏∏‡∏£‡∏µ',
            '‡∏£‡∏±‡∏ä‡∏Å‡∏≤‡∏•', '‡∏û‡∏£‡∏∞‡∏°‡∏´‡∏≤‡∏Å‡∏©‡∏±‡∏ï‡∏£‡∏¥‡∏¢‡πå', '‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°'
        ];
        return historicalKeywords.some(keyword => message.toLowerCase().includes(keyword));
    }

    private getHistoricalAnswer(message: string, context: Conversation['context']): string {
        const lowerMessage = message.toLowerCase();
        
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
        context.memory.lastTopic = 'history';
        context.memory.lastQuestion = message;

        // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á
        if (message.includes('‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á')) {
            const capitals = this.specializedKnowledge.history.capitals;
            if (message.includes('‡∏Å‡∏µ‡πà')) {
                return `‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡∏°‡∏µ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${capitals.length} ‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà:\n` +
                    capitals.map(c => `${c.name} (${c.period})`).join('\n') + ' üèõÔ∏è';
            }
            // ‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞
            for (const capital of capitals) {
                if (message.includes(capital.name)) {
                    return `${capital.name} ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á${capital.period} ${capital.details} üèõÔ∏è`;
                }
            }
        }

        // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        if (message.includes('‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå') || message.includes('‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∞‡πÑ‡∏£')) {
            const events = this.specializedKnowledge.history.importantEvents;
            const eventList = events.map(e => `‡∏û.‡∏®. ${e.year + 543}: ${e.event}`).join('\n');
            return `‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÑ‡∏ó‡∏¢:\n${eventList} üìú`;
        }

        return '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ñ‡∏∏‡∏ì‡∏ä‡πà‡∏ß‡∏¢‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? ü§î';
    }

    private isCulturalQuestion(message: string): boolean {
        const culturalKeywords = [
            '‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°', '‡∏õ‡∏£‡∏∞‡πÄ‡∏û‡∏ì‡∏µ', '‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£', 
            '‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏¢', '‡∏Å‡∏≤‡∏£‡∏•‡∏∞‡πÄ‡∏•‡πà‡∏ô', '‡∏®‡∏¥‡∏•‡∏õ‡∏∞', '‡∏î‡∏ô‡∏ï‡∏£‡∏µ'
        ];
        return culturalKeywords.some(keyword => message.toLowerCase().includes(keyword));
    }

    private getCulturalAnswer(message: string, context: Conversation['context']): string {
        const lowerMessage = message.toLowerCase();
        
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
        context.memory.lastTopic = 'culture';
        context.memory.lastQuestion = message;

        // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•
        if (message.includes('‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•') || message.includes('‡∏õ‡∏£‡∏∞‡πÄ‡∏û‡∏ì‡∏µ')) {
            const festivals = this.specializedKnowledge.culture.festivals;
            return `‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡πÑ‡∏ó‡∏¢:\n` +
                festivals.map(f => `${f.name}: ${f.date} - ${f.details}`).join('\n') + ' üéä';
        }

        // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        if (message.includes('‡∏≠‡∏≤‡∏´‡∏≤‡∏£')) {
            const food = this.specializedKnowledge.culture.food;
            if (message.includes('‡∏†‡∏≤‡∏Ñ')) {
                const region = Object.entries(food.regions).find(([key]) => 
                    message.includes(key === 'north' ? '‡πÄ‡∏´‡∏ô‡∏∑‡∏≠' : 
                        key === 'northeast' ? '‡∏≠‡∏µ‡∏™‡∏≤‡∏ô' : 
                        key === 'central' ? '‡∏Å‡∏•‡∏≤‡∏á' : '‡πÉ‡∏ï‡πâ')
                );
                if (region) {
                    return `‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏†‡∏≤‡∏Ñ${region[0] === 'north' ? '‡πÄ‡∏´‡∏ô‡∏∑‡∏≠' : 
                        region[0] === 'northeast' ? '‡∏≠‡∏µ‡∏™‡∏≤‡∏ô' : 
                        region[0] === 'central' ? '‡∏Å‡∏•‡∏≤‡∏á' : '‡πÉ‡∏ï‡πâ'}:\n` +
                        region[1].join(', ') + ' üçú';
                }
            }
            return `‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á:\n${food.dishes.join(', ')} üçú`;
        }

        return '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ñ‡∏∏‡∏ì‡∏ä‡πà‡∏ß‡∏¢‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? ü§î';
    }

    private getContextAwareResponse(message: string, context: Conversation['context']): string {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        if (context.lastIntent) {
            switch (context.lastIntent) {
                case 'food':
                    if (message.includes('‡∏≠‡∏£‡πà‡∏≠‡∏¢') || message.includes('‡∏ä‡∏≠‡∏ö')) {
                        context.memory.userPreferences = context.memory.userPreferences || {};
                        context.memory.userPreferences.foods = context.memory.userPreferences.foods || [];
                        context.memory.userPreferences.foods.push(message);
                        return '‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏à‡∏∞‡∏à‡∏≥‡πÑ‡∏ß‡πâ‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ üòä ‡∏°‡∏µ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?';
                    }
                    break;
                case 'music':
                    if (message.includes('‡∏ü‡∏±‡∏á') || message.includes('‡∏ä‡∏≠‡∏ö')) {
                        context.memory.userPreferences = context.memory.userPreferences || {};
                        context.memory.userPreferences.music = context.memory.userPreferences.music || [];
                        context.memory.userPreferences.music.push(message);
                        return '‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö üéµ ‡∏≠‡∏¢‡∏≤‡∏Å‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏≠‡∏µ‡∏Å‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?';
                    }
                    break;
            }
        }

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
        return this.getDefaultResponse(message, context.username);
    }

    private async findAnswer(message: string): Promise<string | null> {
        const lowerMessage = message.toLowerCase();

        // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
        if (lowerMessage.includes('‡∏Å‡∏µ‡πà‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î')) {
            if (lowerMessage.includes('‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢') || lowerMessage.includes('‡πÑ‡∏ó‡∏¢')) {
                return `‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${this.knowledgeBase.thailand.provinces.count} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ‡∏Ñ‡∏£‡∏±‡∏ö üó∫Ô∏è\n\n‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡πÑ‡∏î‡πâ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:\n- ‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠: ${this.knowledgeBase.thailand.provinces.regions.north.length} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î\n- ‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠: ${this.knowledgeBase.thailand.provinces.regions.northeast.length} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î\n- ‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á: ${this.knowledgeBase.thailand.provinces.regions.central.length} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î\n- ‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å: ${this.knowledgeBase.thailand.provinces.regions.east.length} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î\n- ‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å: ${this.knowledgeBase.thailand.provinces.regions.west.length} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î\n- ‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ: ${this.knowledgeBase.thailand.provinces.regions.south.length} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î`;
            }
        }

        // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
        const regions = {
            '‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠': this.knowledgeBase.thailand.provinces.regions.north,
            '‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô': this.knowledgeBase.thailand.provinces.regions.northeast,
            '‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠': this.knowledgeBase.thailand.provinces.regions.northeast,
            '‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á': this.knowledgeBase.thailand.provinces.regions.central,
            '‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å': this.knowledgeBase.thailand.provinces.regions.east,
            '‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å': this.knowledgeBase.thailand.provinces.regions.west,
            '‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ': this.knowledgeBase.thailand.provinces.regions.south
        };

        for (const [region, provinces] of Object.entries(regions)) {
            if (lowerMessage.includes(region.toLowerCase()) && 
                (lowerMessage.includes('‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î') || lowerMessage.includes('‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£'))) {
                return `${region}‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡∏°‡∏µ ${provinces.length} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà:\n${provinces.join(', ')} üèîÔ∏è`;
            }
        }

        // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£
        if ((lowerMessage.includes('‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£') || lowerMessage.includes('‡∏Ñ‡∏ô‡πÑ‡∏ó‡∏¢') || lowerMessage.includes('‡∏û‡∏•‡πÄ‡∏°‡∏∑‡∏≠‡∏á')) && 
            (lowerMessage.includes('‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢') || lowerMessage.includes('‡πÑ‡∏ó‡∏¢'))) {
            return `‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ${this.knowledgeBase.thailand.population.toLocaleString()} ‡∏Ñ‡∏ô (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏õ‡∏µ 2566) üë•`;
        }

        // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á
        if (lowerMessage.includes('‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á') && 
            (lowerMessage.includes('‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢') || lowerMessage.includes('‡πÑ‡∏ó‡∏¢'))) {
            return `‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡∏Ñ‡∏∑‡∏≠ ${this.knowledgeBase.thailand.capital} üèôÔ∏è`;
        }

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å Wikipedia
        return await this.searchWikipedia(message);
    }

    private async searchWikipedia(query: string): Promise<string | null> {
        try {
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô
            const searchResponse = await axios.get('https://th.wikipedia.org/w/api.php', {
                params: {
                    action: 'query',
                    list: 'search',
                    srsearch: query,
                    format: 'json',
                    utf8: 1,
                    origin: '*'
                }
            });

            if (searchResponse.data.query.search.length === 0) {
                return null;
            }

            // ‡∏î‡∏∂‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö
            const firstResult = searchResponse.data.query.search[0];
            const contentResponse = await axios.get('https://th.wikipedia.org/w/api.php', {
                params: {
                    action: 'query',
                    pageids: firstResult.pageid,
                    prop: 'extracts',
                    exintro: 1,
                    explaintext: 1,
                    format: 'json',
                    utf8: 1,
                    origin: '*'
                }
            });

            const pages = contentResponse.data.query.pages;
            const pageContent = pages[firstResult.pageid].extract;

            if (pageContent) {
                // ‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå
                const shortContent = pageContent.substring(0, 300);
                const wikiLink = `https://th.wikipedia.org/?curid=${firstResult.pageid}`;
                return `${shortContent}...\n\n‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: ${wikiLink} üìö`;
            }

            return null;
        } catch (error) {
            console.error('Wikipedia search error:', error);
            return null;
        }
    }

    private containsBadWords(message: string): boolean {
        const badWords = ['‡πÄ‡∏´‡∏µ‡πâ‡∏¢', '‡∏Ñ‡∏ß‡∏¢', '‡∏™‡∏±‡∏™', '‡πÑ‡∏≠‡πâ', '‡∏°‡∏∂‡∏á', '‡∏Å‡∏π', '‡πÄ‡∏¢‡πá‡∏î', '‡∏´‡∏µ', '‡∏™‡∏±‡∏ï‡∏ß‡πå'];
        return badWords.some(word => message.toLowerCase().includes(word));
    }

    private getOrCreateConversation(userId: string): Conversation {
        if (!this.conversations.has(userId)) {
            this.conversations.set(userId, {
                messages: [],
                context: {
                    username: userId,
                    lastIntent: '',
                    mood: 'neutral',
                    topics: new Set(),
                    lastInteraction: new Date(),
                    memory: {}
                }
            });
        }
        return this.conversations.get(userId);
    }

    private isRecentInteraction(lastInteraction: Date): boolean {
        return (new Date().getTime() - lastInteraction.getTime()) < this.CONTEXT_TIMEOUT;
    }

    private getRegionalInfo(message: string, context: Conversation['context']): string {
        const regions = {
            '‡πÄ‡∏´‡∏ô‡∏∑‡∏≠': this.knowledgeBase.thailand.provinces.regions.north,
            '‡∏≠‡∏µ‡∏™‡∏≤‡∏ô': this.knowledgeBase.thailand.provinces.regions.northeast,
            '‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠': this.knowledgeBase.thailand.provinces.regions.northeast,
            '‡∏Å‡∏•‡∏≤‡∏á': this.knowledgeBase.thailand.provinces.regions.central,
            '‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å': this.knowledgeBase.thailand.provinces.regions.east,
            '‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å': this.knowledgeBase.thailand.provinces.regions.west,
            '‡πÉ‡∏ï‡πâ': this.knowledgeBase.thailand.provinces.regions.south
        };

        // ‡∏´‡∏≤‡∏†‡∏≤‡∏Ñ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ñ‡∏≤‡∏°‡∏ñ‡∏∂‡∏á
        for (const [regionName, provinces] of Object.entries(regions)) {
            if (message.includes(regionName)) {
                return `‡∏†‡∏≤‡∏Ñ${regionName}‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${provinces.length} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà:\n${provinces.join(', ')} üó∫Ô∏è`;
            }
        }

        // ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        if (message.includes('‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') || message.includes('‡∏ó‡∏∏‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î')) {
            return `‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${this.knowledgeBase.thailand.provinces.count} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏Ñ ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:\n
‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ (${this.knowledgeBase.thailand.provinces.regions.north.length} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î)
‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ (${this.knowledgeBase.thailand.provinces.regions.northeast.length} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î)
‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á (${this.knowledgeBase.thailand.provinces.regions.central.length} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î)
‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å (${this.knowledgeBase.thailand.provinces.regions.east.length} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î)
‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å (${this.knowledgeBase.thailand.provinces.regions.west.length} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î)
‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ (${this.knowledgeBase.thailand.provinces.regions.south.length} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î) üó∫Ô∏è`;
        }

        return '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏≤‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏Ñ‡πÑ‡∏´‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö? ü§î';
    }

    private getHistoricalTimeline(lastQuestion: string, currentMessage: string): string {
        const capitals = this.specializedKnowledge.history.capitals;
        const events = this.specializedKnowledge.history.importantEvents;

        // ‡∏ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á
        if (lastQuestion.includes('‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á')) {
            for (let i = 0; i < capitals.length; i++) {
                if (lastQuestion.includes(capitals[i].name)) {
                    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                    if (i + 1 < capitals.length) {
                        const nextCapital = capitals[i + 1];
                        return `‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å${capitals[i].name} ‡∏ï‡πà‡∏≠‡∏°‡∏≤‡∏Ñ‡∏∑‡∏≠${nextCapital.name} (${nextCapital.period}) ${nextCapital.details} üèõÔ∏è`;
                    } else {
                        return `${capitals[i].name} ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô üèôÔ∏è`;
                    }
                }
            }
        }

        // ‡∏ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå
        if (lastQuestion.includes('‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå')) {
            const sortedEvents = [...events].sort((a, b) => a.year - b.year);
            return `‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÑ‡∏ó‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤:\n${
                sortedEvents.map(e => `‡∏û.‡∏®. ${e.year + 543}: ${e.event}`).join('\n')
            } üìú`;
        }

        return '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏≤‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ä‡πà‡∏ß‡∏á‡πÑ‡∏´‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? ü§î';
    }

    private cleanupOldConversations() {
        const now = new Date().getTime();
        for (const [userId, conversation] of this.conversations.entries()) {
            if (now - conversation.context.lastInteraction.getTime() > this.CONTEXT_TIMEOUT) {
                this.conversations.delete(userId);
            }
        }
    }
} 